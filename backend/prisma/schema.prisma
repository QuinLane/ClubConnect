generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID                Int                     @id @default(autoincrement())
  userType              UserType
  username              String                  @unique
  email                 String                  @unique
  passwordHash          String
  createdAt             DateTime                @default(now())
  executives            Executive[]
  rsvps                 RSVP[]
  sentMessages          SUMessage[]             @relation("SentMessages")
  receivedMessages      SUMessage[]             @relation("ReceivedMessages")
  sentNotifications     Notification[]          @relation("SentNotifications")
  receivedNotifications NotificationRecipient[] @relation("ReceivedNotifications")
}

model Club {
  clubID        Int            @id @default(autoincrement())
  clubName      String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  executives    Executive[]
  events        Event[]
  forms         Form[]
  notifications Notification[] @relation("ClubNotifications")
  roles         ClubRole[]
}

model Executive {
  userID      Int
  clubID      Int
  clubRoleID  Int?
  user        User      @relation(fields: [userID], references: [userID])
  club        Club      @relation(fields: [clubID], references: [clubID])
  clubRole    ClubRole? @relation(fields: [clubRoleID], references: [clubRoleID])

  @@id([clubID, userID])
}

model ClubRole {
  clubRoleID Int         @id @default(autoincrement())
  clubID     Int
  roleName   String
  club       Club        @relation(fields: [clubID], references: [clubID])
  executives Executive[]

  @@unique([clubID, roleName])
}

model RSVP {
  rsvpID   Int      @id @default(autoincrement())
  userID   Int
  eventID  Int
  rsvpDate DateTime @default(now())
  user     User     @relation(fields: [userID], references: [userID])
  event    Event    @relation(fields: [eventID], references: [eventID])

  @@unique([userID, eventID])
}

model Form {
  formID      Int        @id @default(autoincrement())
  clubID      Int
  formType    FormType
  status      FormStatus @default(Pending)
  submittedAt DateTime   @default(now())
  details     String?
  club        Club       @relation(fields: [clubID], references: [clubID])
}

model SUMessage {
  messageID  Int      @id @default(autoincrement())
  senderID   Int? // Null for SU messages
  receiverID Int? // Null for messages to SU, userID for SU replies
  content    String
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)
  isActive   Boolean @default(true) //tracks if the message thread is active
  threadID   Int // Groups messages into a thread
  sender     User?    @relation("SentMessages", fields: [senderID], references: [userID])
  receiver   User?    @relation("ReceivedMessages", fields: [receiverID], references: [userID])
}

model Notification {
  notificationID Int                     @id @default(autoincrement())
  title          String
  content        String
  postedAt       DateTime                @default(now())
  senderID       Int
  clubID         Int? // Optional, for club-specific notifications
  sender         User                    @relation("SentNotifications", fields: [senderID], references: [userID])
  club           Club?                   @relation("ClubNotifications", fields: [clubID], references: [clubID])
  recipients     NotificationRecipient[] @relation("NotificationRecipients")
}

model NotificationRecipient {
  notificationID Int
  userID         Int
  isRead         Boolean      @default(false)
  notification   Notification @relation("NotificationRecipients", fields: [notificationID], references: [notificationID])
  user           User         @relation("ReceivedNotifications", fields: [userID], references: [userID])

  @@id([notificationID, userID])
}

model Venue {
  venueID      Int           @id @default(autoincrement())
  name         String        @unique
  capacity     Int
  address      String
  type         String?
  reservations Reservation[]
}

model Event {
  eventID     Int          @id @default(autoincrement())
  name        String
  description String
  clubID      Int
  club        Club         @relation(fields: [clubID], references: [clubID], onDelete: Cascade)
  reservation Reservation?
  rsvps       RSVP[]

  @@map("event")
}

model Reservation {
  reservationID Int      @id @default(autoincrement())
  date          DateTime
  venueID       Int
  venue         Venue    @relation(fields: [venueID], references: [venueID], onDelete: Cascade)
  eventID       Int      @unique
  event         Event    @relation(fields: [eventID], references: [eventID])

  @@unique([venueID, date])
}

enum UserType {
  Student
  SUAdmin
}

enum FormType {
  ClubCreation
  EventApproval
  Funding
}

enum FormStatus {
  Pending
  Approved
  Rejected
}
