generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userID                Int                     @id @default(autoincrement())
  userType              UserType
  username              String                  @unique
  email                 String                  @unique
  passwordHash          String
  forms                 Form[]
  createdAt             DateTime                @default(now())
  executives            Executive[]
  rsvps                 RSVP[]
  Messages              SUMessage[]             @relation("Messages")
  sentNotifications     Notification[]          @relation("SentNotifications")
  receivedNotifications NotificationRecipient[] @relation("ReceivedNotifications")
  memberships           MemberOf[]              @relation("UserMemberships")
}

model MemberOf {
  userID Int
  clubID Int
  user   User @relation("UserMemberships", fields: [userID], references: [userID])
  club   Club @relation("ClubMembers", fields: [clubID], references: [clubID])

  @@id([userID, clubID])
}

model Club {
  clubID           Int            @id @default(autoincrement())
  clubName         String         @unique
  description      String?        @db.Text
  createdAt        DateTime       @default(now())
  executives       Executive[]
  members          MemberOf[]     @relation("ClubMembers")
  events           Event[]
  notifications    Notification[] @relation("ClubNotifications")
  socialMediaLinks String?
  website          String?
  clubEmail        String?
  image            Bytes?
}

model Executive {
  userID Int
  clubID Int
  role   String?
  user   User    @relation(fields: [userID], references: [userID])
  club   Club    @relation(fields: [clubID], references: [clubID])

  @@id([clubID, userID])
}

model RSVP {
  rsvpID  Int   @id @default(autoincrement())
  userID  Int
  eventID Int
  user    User  @relation(fields: [userID], references: [userID])
  event   Event @relation(fields: [eventID], references: [eventID])

  @@unique([userID, eventID])
}

model Form {
  formID      Int        @id @default(autoincrement())
  userID      Int
  formType    FormType
  status      FormStatus @default(Pending)
  submittedAt DateTime   @default(now())
  details     String     @db.Text
  user        User       @relation(fields: [userID], references: [userID])
}


enum MessageDirection {
  SU_TO_EXEC   // when SU → exec
  EXEC_TO_SU   // when exec → SU
}

model SUMessage {
  messageID  Int              @id @default(autoincrement())
  userID     Int?             // ID of the person on the exec side
  content    String           @db.Text
  direction  MessageDirection 
  sentAt     DateTime         @default(now())
  User       User?            @relation("Messages", fields: [userID], references: [userID])
}


model Notification {
  notificationID Int                     @id @default(autoincrement())
  title          String
  content        String
  postedAt       DateTime                @default(now())
  senderID       Int
  clubID         Int? // Optional, for club-specific notifications
  sender         User                    @relation("SentNotifications", fields: [senderID], references: [userID])
  club           Club?                   @relation("ClubNotifications", fields: [clubID], references: [clubID])
  recipients     NotificationRecipient[] @relation("NotificationRecipients")
}

model NotificationRecipient {
  notificationID Int
  userID         Int
  notification   Notification @relation("NotificationRecipients", fields: [notificationID], references: [notificationID])
  user           User         @relation("ReceivedNotifications", fields: [userID], references: [userID])

  @@id([notificationID, userID])
}

model Venue {
  venueID      Int           @id @default(autoincrement())
  name         String        @unique
  capacity     Int
  address      String
  type         String?
  openHours    String? // E.g., "9:00-17:00"
  reservations Reservation[]
}

model Event {
  eventID     Int          @id @default(autoincrement())
  name        String
  description String      @db.Text
  clubID      Int
  club        Club         @relation(fields: [clubID], references: [clubID], onDelete: Cascade)
  reservation Reservation?
  rsvps       RSVP[]
  image       Bytes?

  @@map("event")
}

model Reservation {
  reservationID Int      @id @default(autoincrement())
  start         DateTime
  endTime       DateTime
  venueID       Int
  venue         Venue    @relation(fields: [venueID], references: [venueID], onDelete: Cascade)
  eventID       Int      @unique
  event         Event    @relation(fields: [eventID], references: [eventID])

  @@unique(reservationID)
}

enum UserType {
  Student
  SUAdmin
}

enum FormType {
  ClubCreation
  EventApproval
  Funding
  DeleteClub
}

enum FormStatus {
  Pending
  Approved
  Rejected
}

